(fn [init]
  (let [numerals [[0 ""]
                  [1 "I"]
                  [4 "IV"]
                  [5 "V"]
                  [9 "IX"]
                  [10 "X"]
                  [40 "XL"]
                  [50 "L"]
                  [90 "XC"]
                  [100 "C"]
                  [400 "CD"]
                  [500 "D"]
                  [900 "CM"]
                  [1000 "M"]]
        done? (fn [[acc val]] (< val 0))
        convert-next (fn [[acc val]]
                       (if (zero? val)
                         [acc -1]
                         (let [match (last
                                      (take-while (fn [[arabic roman]]
                                                    (<= arabic val))
                                                  numerals))]
                           [(str acc (second match))
                            (- val (first match))])))]
    (last
     (map first
          (take-while (complement done?)
                      (iterate convert-next ["" init]))))))
